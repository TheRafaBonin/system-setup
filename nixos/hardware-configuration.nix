# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usb_storage" "sd_mod" "sr_mod" "rtsx_usb_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/769bc31e-b166-46ee-afd9-60ab0d290d08";
      fsType = "btrfs";
      options = [ "compress=zstd" "subvol=root" ];
    };

  fileSystems."/nix" =
    { device = "/dev/disk/by-uuid/769bc31e-b166-46ee-afd9-60ab0d290d08";
      fsType = "btrfs";
      options = [ "compress=zstd" "noatime" "subvol=nix" ];
    };

  fileSystems."/permanent" =
    { device = "/dev/disk/by-uuid/769bc31e-b166-46ee-afd9-60ab0d290d08";
      fsType = "btrfs";
      options = [ "compress=zstd" "subvol=permanent" ];
    };

  fileSystems."/archive" =
    { device = "/dev/disk/by-uuid/769bc31e-b166-46ee-afd9-60ab0d290d08";
      fsType = "btrfs";
      options = [ "compress=zstd" "subvol=archive" ];
    };

  fileSystems."/animes" =
    { device = "/dev/disk/by-uuid/769bc31e-b166-46ee-afd9-60ab0d290d08";
      fsType = "btrfs";
      options = [ "compress=zstd" "subvol=animes" ];
    };

  fileSystems."/games" =
    { device = "/dev/disk/by-uuid/769bc31e-b166-46ee-afd9-60ab0d290d08";
      fsType = "btrfs";
      options = [ "subvol=games" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/0F3E-A94A";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/a22478ea-9733-447b-bba1-8ee05db4afce"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  
  # Enables OpenGL
  hardware.opengl.driSupport32Bit = true;
  hardware.opengl.driSupport = true;
  hardware.opengl.enable = true;

  # Allows unfree nvidia packages
  nixpkgs.config.allowUnfreePredicate = pkg:
    builtins.elem (lib.getName pkg) [
      "nvidia-x11"
      "nvidia-settings"
      "nvidia-persistenced"
    ];
  

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = ["nvidia"];

  # Configures nvidia drivers
  hardware.nvidia = {
    # Modesetting is required
    modesetting.enable = true;
    
    # Nvidia power management. Experimental
    powerManagement.enable = false;
    powerManagement.finegrained = false;

    # Use open source kernel module [not nouveau]
    open = false;

    # Enable the Nvidia settings menu [nvidia-settings]
    nvidiaSettings = true;
    
    package = config.boot.kernelPackages.nvidiaPackages.legacy_470; 
  };

  # Configure nvidia for laptop using BUS-ID
  hardware.nvidia.prime = {
    intelBusId = "PCI:0:2:0";
    nvidiaBusId = "PCI:1:0:0";
  };
}
